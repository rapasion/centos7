---
- name: unarchive curl file
  unarchive:
    src: "{{ playbook_dir }}/downloads/{{ pcre_gml_source_file }}"
    dest: "{{ gml_source_path }}/"
    owner: "{{ code_user }}"
    group: "{{ code_user }}"
    mode: "0750"

- name: Check {{ gml_source_path }}/lib folder if exist.
  stat:
    path: "{{ gml_source_path }}/lib"
  register: gml_source_lib

- name: Check {{ gml_source_path }}/lib/pkgconfig folder if exist.
  stat:
    path: "{{ gml_source_path }}/lib/pkgconfig"
  register: gml_source_lib_pkgconfig

- name: Check {{ gml_source_path }}/include folder if exist.
  stat:
    path: "{{ gml_source_path }}/include"
  register: gml_source_include

- name: Check {{ gml_source_path }}/include folder if exist.
  stat:
    path: "{{ gml_source_path }}/bin"
  register: gml_source_bin

#- name: Check pcre lib if installed.
#  command: ldconfig -p | grep prce
#  ignore_errors: true
#  register: register_pcre

- name: Create {{ gml_source_path }}/lib folder if not exist.
  file:
    path: "{{ gml_source_path }}/lib"
    state: directory
    owner: "{{ code_user }}"
    group: "{{ code_user }}"
    mode: "0750"
  when:
    - not gml_source_lib.stat.exists

- name: Create {{ gml_source_path }}/lib/pkgconfig folder if not exist.
  file:
    path: "{{ gml_source_path }}/lib/pkgconfig"
    state: directory
    owner: "{{ code_user }}"
    group: "{{ code_user }}"
  when:
    - not gml_source_lib_pkgconfig.stat.exists

- name: Create {{ gml_source_path }}/bin folder if not exist.
  file:
    path: "{{ gml_source_path }}/bin"
    state: directory
    owner: "{{ code_user }}"
    group: "{{ code_user }}"
  when:
    - not gml_source_bin.stat.exists

- name: Create {{ gml_source_path }}/include folder if not exist.
  file:
    path: "{{ gml_source_path }}/include"
    state: directory
    owner: "{{ code_user }}"
    group: "{{ code_user }}"
  when:
    - not gml_source_include.stat.exists


#- name: Delete PCRE Include  old links
#  file:
#    path: "/usr/local/include/{{ item }}"
#    state: absent
#  with_items:
#    - pcre.h
#    - pcre_scanner.h
#    - pcre_stringpiece.h
#    - pcrecpp.h
#    - pcrecpparg.h
#    - pcreposix.h
#  ignore_errors: yes

- name: Link pcre includes
  file:
    src: "{{ pcre_source_install_path }}/include/{{ item }}"
    dest: "{{ gml_source_path }}/include/{{ item }}"
    state: link
    force: yes
  with_items:
    - pcre.h
    - pcre_scanner.h
    - pcre_stringpiece.h
    - pcrecpp.h
    - pcrecpparg.h
    - pcreposix.h

#- name: Delete Curl Bin  old links
#  file:
#    path: "/usr/local/bin/{{ item }}"
#    state: absent
#  with_items:
#    - pcre-config
#    - pcregrep
#    - pcretest
#  ignore_errors: yes

- name: Link PCRE Bin
  file:
    src: "{{ pcre_source_install_path }}/bin/{{ item }}"
    dest: "{{ gml_source_path }}/bin/{{ item }}"
    state: link
    force: yes
  with_items:
    - pcre-config
    - pcregrep
    - pcretest

#- name: Delete PCRE Lib  old links
#  file:
#    path: "/usr/local/lib/{{ item }}"
#    state: absent
#  with_items:
#    - libpcre.a
#    - libpcre.la
#    - libpcre.so
#    - libpcre.so.1
#    - libpcre.so.1.2.11
#    - libpcrecpp.a
#    - libpcrecpp.la
#    - libpcrecpp.so
#    - libpcrecpp.so.0
#    - libpcrecpp.so.0.0.1
#    - libpcreposix.a
#    - libpcreposix.la
#    - libpcreposix.so
#    - libpcreposix.so.0
#    - libpcreposix.so.0.0.6
#  ignore_errors: yes

#- name: Delete old pkg links
#  file:
#    path: "/usr/local/lib/pkgconfig/{{ item }}"
#    state: absent
#  with_items:
#    - libpcre.a
#    - libpcre.pc
#    - libpcrecpp.pc 
#    - libpcreposix.pc 
#  ignore_errors: yes


#- name: Link Pkg files
#  file:
#    src: "{{ pcre_source_install_path }}/lib/pkgconfig/{{ item }}"
#    dest: "{{ gml_source_path }}/lib/pkgconfig/{{ item }}"
#    state: absent
#  with_items:
#    - libpcre.a
#    - libpcre.pc
#    - libpcrecpp.pc 
#    - libpcreposix.pc 
#  when:
#    - register_pcre.failed

- name: Set selinux context for pcre bin
  shell: "sudo semanage fcontext -a -t bin_t '{{ gml_source_path }}/{{pcre_version}}(/.*)?'"
  tags: apache-selinux

- name: Set selinux context for curl
  shell: "sudo semanage fcontext -a -t lib_t '{{ gml_source_path }}/{{pcre_version}}/lib(/.*)?'"
  tags: apache-selinux